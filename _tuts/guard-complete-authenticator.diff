diff --git a/app/config/security.yml b/app/config/security.yml
index 4b8250a..fcbe862 100644
--- a/app/config/security.yml
+++ b/app/config/security.yml
@@ -17,7 +17,11 @@ security:
         main:
             anonymous: ~
             logout: ~
+
             # activate different ways to authenticate
+            guard:
+                authenticators:
+                    - weird_authenticator
 
             # http_basic: ~
             # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate
diff --git a/app/config/services.yml b/app/config/services.yml
index 5c76fc5..61db6ad 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -4,6 +4,6 @@ parameters:
 #    parameter_name: value
 
 services:
-#    service_name:
-#        class: AppBundle\Directory\ClassName
-#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
+    weird_authenticator:
+        class: AppBundle\Security\WeirdFormAuthenticator
+        arguments: ['@doctrine.orm.entity_manager', '@router']
diff --git a/src/AppBundle/Security/WeirdFormAuthenticator.php b/src/AppBundle/Security/WeirdFormAuthenticator.php
index d21f541..c5975f5 100644
--- a/src/AppBundle/Security/WeirdFormAuthenticator.php
+++ b/src/AppBundle/Security/WeirdFormAuthenticator.php
@@ -2,42 +2,99 @@
 
 namespace AppBundle\Security;
 
+use AppBundle\Entity\User;
+use Doctrine\ORM\EntityManager;
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\RouterInterface;
 use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
 use Symfony\Component\Security\Core\Exception\AuthenticationException;
+use Symfony\Component\Security\Core\Security;
 use Symfony\Component\Security\Core\User\UserInterface;
 use Symfony\Component\Security\Core\User\UserProviderInterface;
 use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;
 
 class WeirdFormAuthenticator extends AbstractGuardAuthenticator
 {
+    private $em;
+    private $router;
+
+    public function __construct(EntityManager $em, RouterInterface $router)
+    {
+        $this->em = $em;
+        $this->router = $router;
+    }
+
     public function getCredentials(Request $request)
     {
+        if ($request->getPathInfo() != '/login' || !$request->isMethod('POST')) {
+            return;
+        }
+
+        return [
+            'username' => $request->request->get('_username'),
+            'password' => $request->request->get('_password'),
+            'answer'   => $request->request->get('the_answer'),
+            'terms'    => $request->request->get('terms'),
+        ];
     }
 
     public function getUser($credentials, UserProviderInterface $userProvider)
     {
+        $username = $credentials['username'];
+
+        // this looks like a weird username
+        if (substr($username, 0, 1) == '@') {
+            return;
+        }
+
+        return $this->em->getRepository('AppBundle:User')
+            ->findOneBy(['username' => $username]);
     }
 
     public function checkCredentials($credentials, UserInterface $user)
     {
+        if ($credentials['password'] != 'symfony3') {
+            return;
+        }
+
+        if ($credentials['answer'] != 42) {
+            return;
+        }
+
+        if (!$credentials['terms']) {
+            return;
+        }
+
+        return true;
     }
 
     public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
     {
+        $request->getSession()->set(Security::AUTHENTICATION_ERROR, $exception);
+
+        $url = $this->router->generate('login');
+
+        return new RedirectResponse($url);
     }
 
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
     {
-    }
+        $url = $this->router->generate('homepage');
 
-    public function supportsRememberMe()
-    {
+        return new RedirectResponse($url);
     }
 
     public function start(Request $request, AuthenticationException $authException = null)
     {
+        $url = $this->router->generate('login');
 
+        return new RedirectResponse($url);
+    }
+
+    public function supportsRememberMe()
+    {
+        return true;
     }
 }
